digraph "HostConnect" {
charset="utf-8"
rankdir=BT
"0" [label="{amqp.abstract_channel.AbstractChannel|auto_decode : bool\lchannel_id\lconnection\lis_closing : bool\lmethod_queue : list\l|close()\ldispatch_method()\lsend_method()\lwait()\l}", shape="record"];
"1" [label="{amqp.connection.Connection|Channel : Channel\lauthentication : tuple\lbytes_recv : int\lbytes_sent : int\lchannel_errors : tuple\lchannel_max : int\lchannels : NoneType, dict\lclient_heartbeat : NoneType\lclient_heartbeat : int\lclient_properties : dict\lconfirm_publish : bool\lconnect_timeout : NoneType\lconnected\lconnection : NoneType\lconnection_errors : tuple\lframe_handler_cls\lframe_max : int\lframe_writer\lframe_writer\lframe_writer_cls\lheartbeat : NoneType\lheartbeat : int\lhost : str\lis_closing : bool\llast_heartbeat_received\llast_heartbeat_received : int\llast_heartbeat_sent\llast_heartbeat_sent : int\llibrary_properties : dict\llocale : str\llocales : list\lmechanisms : list\lnegotiate_capabilities : dict\lon_blocked : NoneType\lon_inbound_frame\lon_inbound_frame\lon_open : NoneType, promise\lon_tune_ok : NoneType, promise\lon_unblocked : NoneType\lprev_recv : NoneType\lprev_recv : int\lprev_sent : NoneType\lprev_sent : int\lread_timeout : NoneType\lrecoverable_channel_errors : tuple\lrecoverable_connection_errors : tuple\lserver_capabilities\lserver_heartbeat\lserver_heartbeat : NoneType\lserver_properties : dict\lsock\lsocket_settings : NoneType\lssl : bool\ltransport\ltransport\lversion_major : int\lversion_minor : int\lvirtual_host : str\lwrite_timeout : NoneType\l|Transport()\lblocking_read()\lchannel()\lclose()\lcollect()\lconnect()\ldrain_events()\lheartbeat_tick()\lis_alive()\lon_inbound_method()\lsend_heartbeat()\lthen()\l}", shape="record"];
"2" [label="{amqplib.client_0_8.abstract_channel.AbstractChannel|auto_decode : bool\lchannel_id\lconnection\lmethod_queue : list\l|close()\ldispatch_method()\lwait()\l}", shape="record"];
"3" [label="{amqplib.client_0_8.channel.Channel|active : bool\lalerts : Queue\lauto_decode : bool\lcallbacks : dict\lchannel_id : NoneType\lconnection : NoneType\ldefault_ticket : int\lis_open : bool\lreturned_messages : Queue\l|access_request()\lbasic_ack()\lbasic_cancel()\lbasic_consume()\lbasic_get()\lbasic_publish()\lbasic_qos()\lbasic_recover()\lbasic_reject()\lclose()\lexchange_declare()\lexchange_delete()\lflow()\lqueue_bind()\lqueue_declare()\lqueue_delete()\lqueue_purge()\lqueue_unbind()\ltx_commit()\ltx_rollback()\ltx_select()\l}", shape="record"];
"4" [label="{amqplib.client_0_8.connection.Connection|channel_max : int\lchannels : dict, NoneType\lconnection : NoneType\lframe_max : int\lheartbeat : int\lknown_hosts : str\llocales : list\lmechanisms : list\lmethod_reader : MethodReader\lmethod_writer : MethodWriter\lserver_properties : dict\ltransport : NoneType, TCPTransport, SSLTransport\lversion_major : int\lversion_minor : int\l|channel()\lclose()\l}", shape="record"];
"5" [label="{sarra.sr_amqp.HostConnect|asleep : bool\lchannel : NoneType\lconnection : NoneType\lhost : str\llogger : NoneType\lloop : bool\lpasswd : str\lpassword\lport : int, NoneType\lprotocol : str\lrebuilds : list\lsleeping : NoneType\lssl : bool\ltoclose : list\luse_amqp : bool\luse_amqplib : bool\luse_pika : bool\luser : str\lvhost : str\l|add_build()\ladd_sleeping()\lchoose_amqp_alternative()\lclose()\lconnect()\lexchange_declare()\lexchange_delete()\lnew_channel()\lqueue_delete()\lreconnect()\lset_credentials()\lset_url()\l}", shape="record"];
"1" -> "0" [arrowhead="empty", arrowtail="none"];
"3" -> "2" [arrowhead="empty", arrowtail="none"];
"4" -> "2" [arrowhead="empty", arrowtail="none"];
"1" -> "5" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
"3" -> "5" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="channel", style="solid"];
"4" -> "5" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="connection", style="solid"];
}
