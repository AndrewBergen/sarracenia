
==================
Version 3 Refactor
==================

Abstract Goals:

* Absolute configuration compatibility (upward compatible.)
  including all plugins.

* multi-protocol support.
  ability to put in urls for mqtt, or different amqp libraries, perhaps others.

* internally represent things in v03 messages, have something built
  v02 ones for compatibility, but operate in v03.

* less code, simpler code.
  more readable, elegant, pythonic code.
  make maintenance easier. 

while you're at it
------------------

goals of opportunity:

  * add stuff to make it work as an API?
  * Finish off log rotation.
  * Assume python >= 3.4 remove old cruft.
  * Assume ubuntu >= 18.04 remove old cruft.
  * Assume systemd, remove sysv integration.
 
Uknowns
-------

Things that are not clear at the outset.


Ship of Theseus
~~~~~~~~~~~~~~~

It might be that the re-factoring inherent in v03 results in a 
Ship of Theseus, where it works the same way as v02, but all
the parts are different... obviously a concern/risk... 
might be a feature.

Dictionaries or Members for Properties?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There seems to be a tension between using class members and dictionaries
for settings.  members seem more convenient, but harder to manipulate,
though we have equivalent idioms. Argparse returns options as their own
members of this parsing object.  There is a hierarchy to reconcile:

* protocol defaults
* consumer defaults
* component defaults
* configuration settings (overrides)
* command line options (overrides)

resolving them to apply overrides, mais more sense as operations
on dictionaries, printing, saving loading, again makes more sense
as dictionaries.  In code, members are slightly shorter, and perhaps
more idiomatic:: 

   hasattr(cfg,'member') vs. 'member' in cfg (dictionary)

What makes more sense... Does it make any practical difference?
not sure... need to keep the members for places where
plugins are called, but can use properties elsewhere, if desired.


Concrete Plan
-------------

replace sarra/sr_config with sarra/sr_cfg2. The new sr_cfg2 uses argparse 
and a simpler model for config file parsing.


HMPC - Topic Message Protocol Client... a generalization of the message
passing library with a simplified API.  abstracts the protocol differences
away.


Progress
--------

sr_amqp.py is completely replaced by HMPC. All the important logic is preserved,
but it is transcribed into new classes. Should have identical failure
recovery behaviour. This is working in a demo form. To reproduce,
fire up sr_insects, run setup. and the configurations will be installed.


sr_cfg2.py is still a stub, it has a lot of features and options, but
it isn't clear how to expand it to all of them. the thing about instances
inheriting from configure... it is odd, but hard to see how changing that
will not break everything, plugin-wise... thinking about having defaults
distributed to the classes that use the settings, and having something
that brings them together, instead of one massive config thing.

Thinking about replacing sr_consumer with a new class that implements the
General Algorithm describe in `Concepts <Concepts.rst#the-general-algorithm>`

Thinking about just removing the sr_ prefix from classes for replacements,
since they are in sarra directory anyways. so have an internal class 
sarra/instances, sarra/sarra <- replace consumer...



