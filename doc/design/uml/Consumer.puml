@startuml
participant ":sr_subscribe.sr_subscribe" as ss
participant ":sr_consumer.sr_consumer" as scsc
participant "consumer:sr_amqp.Consumer" as sac
participant "msg:sr_message.sr_message" as smsm
participant "parent:sr_config.sr_config" as pss
participant "plugin:msg_pclean_f92.Msg_Pclean_F92" as mpf
participant "plugin:post_log.Post_Log" as pl

''''''Gathering message''''''
[o-> ss: run()
loop true
 activate ss
 ss -> scsc: consume()
  activate scsc
  scsc -> sac: ack(raw_msg)
   activate sac
   return
  scsc -> sac: consume(queuename)
   activate sac
   return raw_msg

''''''Prepare message''''''''
  scsc -> smsm: from_amqplib(raw_msg)
   activate smsm
   smsm -> smsm: trim_headers()
    activate smsm
    return
   smsm -> smsm: parse_v02_post()
    activate smsm
    smsm -> smsm: set_sumstr(sumstr)
     activate smsm
     return
    smsm -> pss: set_sumalgo(sumflg)
     activate pss
     return
    smsm -> pss: sumalgo = parent.sumalgo
    return
   return
 alt use_pattern
   scsc -> pss: isMatchingPattern(msg.urlstr, accept_unmatch)
   activate pss
   return True
 end alt
 return ok, msg
 ss -> ss: process_message()
  activate ss
  ss -> ss: set_new()
   activate ss
   return
  ss -> ss: ____on_message____()
   activate ss
   ss -> mpf: on_message()
    activate mpf
    alt removed != 13
     mpf -> scsc: msg_to_retry()
      activate scsc
      return
     ss <-- mpf: ok=False
    else notify_only && post_broker
     ss <-- mpf: ok=True
     deactivate mpf
     ss -> ss: ____on_post()____
      activate ss
      ss -> pl: perform()
       activate pl
       return True
      ss -> smsm: publish()
       activate smsm
       return ok
    end alt
   return ok
  return ok
 return ok
end loop
[<--o ss
deactivate ss
@enduml